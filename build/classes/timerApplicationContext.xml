<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd 
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
   
	<!-- 定时器设置开始 -->
	<!-- 第一步 声明一个定时任务,该类extends java.util.TimerTask -->
	<bean id="monitorTimer" class="com.onemenu.server.timer.MonitorTimer"></bean>

	<!-- 第二步 调度定时任务,把声明的定时任务注入进来,并设置定时参数 -->
	<bean id="scheduledClock" class="org.springframework.scheduling.timer.ScheduledTimerTask">
		<property name="timerTask" ref="monitorTimer" />
		<property name="period">
			<value>60000</value>
			<!--这里是每隔多长时间就进行一次计时任务,单位ms -->
		</property>
		<property name="delay">
			<value>10000</value>
			<!--这里是服务启动后延时多少时间,开始计时任务,单位ms -->
		</property>
	</bean>
	
	<!-- 启动定时任务,如果有多个定时任务,则重复步骤一,二,然后把第二步设置的beany放在下面的list列表中.此方法不能精确几点运行定时任务 -->
	<bean id="startTimeTask" class="org.springframework.scheduling.timer.TimerFactoryBean">
		<property name="scheduledTimerTasks">
			<list>
				<ref bean="scheduledClock"></ref>
			</list>
		</property>
	</bean>

	<!-- 
	spring配置文件中配置作业类JobDetailBean
	说明：org.springframework.scheduling.quartz.JobDetailBean有两个属性，jobClass属性即我们在java代码中定义的任务类，jobDataAsMap属性即该任务类中需要注入的属性值。
	 -->
	<!-- 启动凌晨12点执行的定时任务 -->
	<bean id="resetValueJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.onemenu.server.timer.ResetValueJob</value>
		</property>
		<property name="jobDataAsMap">  
			<map>  
				<entry key="timeout" value="0" />  
			</map>  
		</property>
	</bean>
	
	<!-- 
	配置作业调度的触发方式（触发器）
	Quartz的作业触发器有两种，分别是
	org.springframework.scheduling.quartz.SimpleTriggerBean
	org.springframework.scheduling.quartz.CronTriggerBean
	 -->
	<!-- 第一种SimpleTriggerBean，只支持按照一定频度调用任务，如每隔30分钟运行一次。 -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">  
		<property name="jobDetail" ref="resetValueJob" />  
		<property name="startDelay" value="0" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->  
		<property name="repeatInterval" value="60000" /><!-- 每2秒调度一次 -->  
	</bean>  
	
	<!-- 设定凌晨0点执行 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="resetValueJob" />
		<property name="cronExpression">
			<value>0 0 0 * * ?</value>
		</property>
	</bean>

	<!-- 启动定时器 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="simpleTrigger" />
				<ref bean="cronTrigger" /> <!-- 配置调度工厂 说明：该参数指定的就是之前配置的触发器的名字。 -->
			</list>
		</property>
	</bean>
	<!-- 定时器设置结束 -->
	
</beans>